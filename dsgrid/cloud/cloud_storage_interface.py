import abc
from contextlib import contextmanager


class CloudStorageInterface(abc.ABC):
    """Defines interface to synchronize data stored on a cloud storage system."""

    @abc.abstractclassmethod
    def _sync(self, src, dst, exclude=None):
        """Base sync function.

        Parameters
        ----------
        src : str
            source path
        dst : str
            destination path
        exclude : list, optional
            list of exclusion patterns to exclude, by default None.
            If excluding whole directories, the exclusion must end with /* , e.g. "data/*".
        """

    @abc.abstractclassmethod
    def check_locks(self, directory):
        """Checks recursively if a lock file exists anywhere within a directory.
        Returns an error if lock file(s) exist.

        # Parameters
        # ----------
        # directory : str
        #     Directory path
        """

    @abc.abstractclassmethod
    def get_locks(self, directory):
        """Returns list of lock files that exist anywhere (recursively) within a directory tree.

        Parameters
        ----------
        directory : str
            Directory path
        """

    @abc.abstractmethod
    def lock_exists(self, directory):
        """Returns True if a lock exists with a directory.

        Parameters
        ----------
        directory : str
            Directory path
        """

    @abc.abstractmethod
    @contextmanager
    def make_lock(self, directory):
        """Context manager to make a registry.lock file with directory path. On close, it removes the lock file.

        Parameters
        ----------
        directory : str
            Directory path

        Raises
        ------
        DSGRegistryLockError
            Raises a registry lock error if a registry.lock already exists
        """

    @abc.abstractmethod
    def read_lock(self, path):
        """Reads a lock file and returns a dictionary of its contents.

        Parameters
        ----------
        path : str
            Lock file path
        """

    @abc.abstractmethod
    def remove_lock(self, directory, force=False):
        """Remove the lock at directory path.

        Parameters
        ----------
        directory : str
            Directory path
        force : bool
            Boolean flag to force removal of lock file that does not have the same UUID or username, by default False

        Raises
        ------
        DSGRegistryLockError
            Raises a registry lock error if a registry.lock already exists and is was generated by a different user or different UUID (if force==False).
        """

    @abc.abstractmethod
    def sync_pull(self, remote_path, local_path, exclude=None, delete_local=False):
        """Synchronize data from remote_path to local_path.
        Deletes any files in local_path that do not exist in remote_path.

        Parameters
        ----------
        remote_path : str
            Remote registry path
        local_path : str
            Local registry path
        delete_local : bool
            Deletes files and directories that exist in the local but in the remote
        exclude : list, optional
            List of exclusion patterns to exclude, by default None.
            If excluding whole directories, the exclusion must end with /* , e.g. "data/*"

        """

    @abc.abstractmethod
    def sync_push(self, remote_path, local_path, exclude=None):
        """Synchronize data from local path to remote_path

        Parameters
        ----------
        remote_path : str
        local_path : str
        exclude : list, optional
            List of exclusion patterns to exclude, by default None.
            If excluding whole directories, the exclusion must end with /* , e.g. "data/*".
        """
