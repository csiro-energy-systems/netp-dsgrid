import os
from typing import Dict, List, Optional, Union

from pydantic import Field, validator
from semver import VersionInfo

from .config_base import ConfigBase
from .dimensions import DimensionReferenceModel
from dsgrid.data_models import DSGBaseModel
from dsgrid.dimension.base_models import DimensionType
from dsgrid.utils.versioning import handle_version_or_str


class AssociationTableModel(DSGBaseModel):
    """Attributes for an association table"""

    from_dimension: DimensionReferenceModel = Field(
        title="from_dimension",
        description="from dimension",
    )
    to_dimension: DimensionReferenceModel = Field(
        title="to_dimension",
        description="to dimension",
    )
    filename: str = Field(
        title="filename",
        alias="file",
        description="filename containing association table records",
    )
    association_table_id: Optional[str] = Field(
        title="association_table_id",
        alias="id",
        description="unique identifier, generated by dsgrid",
    )

    @validator("filename")
    def check_filename(cls, filename):
        """Validate record file"""
        if not os.path.exists(filename):
            raise ValueError(f"{filename} does not exist")
        return filename


class AssociationTableConfigModel(DSGBaseModel):
    """Represents association table model configurations for dimension mapping"""

    association_tables: List[AssociationTableModel] = Field(
        title="association_tables",
        description="association tables for mapping within and across projects and datasets",
    )
    registration: Optional[Dict] = Field(
        title="registration",
        description="registration information",
    )


class AssociationTableConfig(ConfigBase):
    """Provides an interface to a AssociationTableConfigModel."""

    @staticmethod
    def model_class():
        return AssociationTableConfig


class AssociationTableReferenceModel(DSGBaseModel):
    """Reference to an association table stored in the registry"""

    from_dimension_type: DimensionType = Field(
        title="from_dimension_type",
        alias="type",
        description="type of the dimension",
    )
    to_dimension_type: DimensionType = Field(
        title="to_dimension_type",
        alias="type",
        description="type of the dimension",
    )
    association_table_id: str = Field(
        title="association_table_id",
        description="unique ID of the association table",
    )
    version: Union[str, VersionInfo] = Field(
        title="version",
        description="version of the dimension",
    )

    @validator("version")
    def check_version(cls, version):
        return handle_version_or_str(version)
